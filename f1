import datetime
from warnings import filters
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.backends.backend_pdf
import tkinter as tk
from matplotlib.backends.backend_pdf import PdfPages
from tkinter import E, W, Canvas, Menu, Menubutton, Tk, Label, Button, Entry, messagebox, Listbox, MULTIPLE, END, Toplevel, StringVar, OptionMenu, filedialog, Scrollbar, Frame
from tkinter.ttk import Separator, Style, Treeview
import re
from tkinter import messagebox
from matplotlib import pyplot as plt


def validate_date_format(date_str):
        """Validate if the given date string is in the correct format YYYYMMDD."""
        # Regular expression to match YYYYMMDD format
        pattern = re.compile(r"^\d{4}(0[1-9]|1[0-2])(0[1-9]|[12][0-9]|3[01])$")
        return bool(pattern.match(date_str))


class UkuleleTuesdayApp:
    def __init__(self, master):
            self.master = master
            self.master.title("Ukulele Tuesday Data Visualizer")
            self.master.geometry("800x600")
            self.master.configure(bg="#2e2e2e")  # Set a dark background for the application

            # Sidebar Frame for Buttons
            sidebar = tk.Frame(master, bg="#1e1e1e", width=200)
            sidebar.pack(side="left", fill="y")

            # Initialize file paths
            self.tabdb_path = None
            self.playdb_path = None
            self.requestdb_path = None

            # Initialize data attributes
            self.tabdb = None
            self.playdb = None
            self.requestdb = None

            # Initialize attributes
            self.difficulty_from = None  # Entry widget for difficulty range (from)
            self.difficulty_to = None  # Entry widget for difficulty range (to)

            # Initialize filter variables
            self.start_date_var = tk.StringVar()
            self.end_date_var = tk.StringVar()
            self.filters = {}

            # Initialize filter frame (hidden initially)
            self.filter_frame = tk.Frame(master, bg="#2e2e2e")
            self.filter_frame.pack_forget()

            # Initialize graph menu variable
            self.graph_var = tk.StringVar(master)
            self.graph_var.set("Select")  # Default value

            # Sidebar Buttons
            self.tabdb_button = self.create_button(sidebar, "Upload tabdb.csv", lambda: self.upload_tabdb(self.tabdb_button))
            self.playdb_button = self.create_button(sidebar, "Upload playdb.csv", lambda: self.upload_playdb(self.playdb_button))
            self.requestdb_button = self.create_button(sidebar, "Upload requestdb.csv", lambda: self.upload_requestdb(self.requestdb_button))

            # Content Frame for Filters and Main Area
            content_frame = tk.Frame(master, bg="#2e2e2e")  # Define content_frame
            content_frame.pack(side="right", fill="both", expand=True)


    def validate_dates(self):
        """Validate that the dates entered are in the correct format."""
        start_date = self.start_date_var.get()
        end_date = self.end_date_var.get()

        try:
            # Check if the dates are valid
            start_date_obj = datetime.datetime.strptime(start_date, "%Y-%m-%d")
            end_date_obj = datetime.datetime.strptime(end_date, "%Y-%m-%d")
            if start_date_obj > end_date_obj:
                messagebox.showerror("Validation Error", "Start date must be before or equal to end date.")
            else:
                messagebox.showinfo("Validation Success", "Dates are valid!")
        except ValueError:
            messagebox.showerror("Validation Error", "Please enter dates in the format YYYY-MM-DD.")
    
    def create_button(self, parent, text, command):
        """Helper function to create sidebar buttons."""
        button = tk.Button(
            parent,
            text=text,
            command=command,  # Pass command directly here
            bg="#3c3f41",
            fg="white",
            font=("Arial", 10, "bold"),
            relief="flat",
            activebackground="#505050",
            activeforeground="white",
        )
        button.pack(pady=10, padx=10, fill="x")
        return button  # Ensure the button is returned


    def upload_tabdb(self, button):
        self.tabdb_path = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv")])
        if self.tabdb_path.endswith("tabdb.csv"):
            try:
                self.load_data()  # Load the data into the app
                if button:
                    button.config(state="disabled")  # Disable the button
                messagebox.showinfo("Success", "tabdb.csv uploaded successfully!")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to load tabdb.csv:\n{e}")
        else:
            messagebox.showerror("Error", "Please select the correct tabdb.csv file.")

    def upload_playdb(self, button):
        self.playdb_path = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv")])
        if self.playdb_path.endswith("playdb.csv"):
            try:
                self.load_data()
                if button:
                    button.config(state="disabled")
                messagebox.showinfo("Success", "playdb.csv uploaded successfully!")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to load playdb.csv:\n{e}")
        else:
            messagebox.showerror("Error", "Please select the correct playdb.csv file.")

    def upload_requestdb(self, button):
        self.requestdb_path = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv")])
        if self.requestdb_path.endswith("requestdb.csv"):
            try:
                self.load_data()
                if button:
                    button.config(state="disabled")
                messagebox.showinfo("Success", "requestdb.csv uploaded successfully!")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to load requestdb.csv:\n{e}")
        else:
            messagebox.showerror("Error", "Please select the correct requestdb.csv file.")

    
    def load_data(self):
        """Load data from CSV files and convert dates to datetime."""
        if not self.tabdb_path or not self.playdb_path or not self.requestdb_path:
            self.filter_frame.pack_forget()  # Hide the frame if files are missing
            return

        try:
            # Load CSV files
            self.tabdb = pd.read_csv(self.tabdb_path)
            self.playdb = pd.read_csv(self.playdb_path)
            self.requestdb = pd.read_csv(self.requestdb_path)
            tabdb = pd.read_csv(self.tabdb_path)
            playdb = pd.read_csv(self.playdb_path)
            requestdb = pd.read_csv(self.requestdb_path)

            # Standardize column names to lowercase
            self.tabdb.columns = self.tabdb.columns.str.lower()

            # Convert 'date' column to datetime format
            if 'date' in self.tabdb.columns:
                self.tabdb['date'] = pd.to_datetime(
                    self.tabdb['date'], format='%Y%m%d', errors='coerce'
                )

         # Convert the 'difficulty' column to numeric, coercing errors to NaN
            if 'difficulty' in tabdb.columns:
                tabdb['difficulty'] = pd.to_numeric(tabdb['difficulty'], errors='coerce')

            # Drop the 'tabber' column if it exists
            if "tabber" in tabdb.columns:
                tabdb.drop(columns=["tabber"], inplace=True)

            self.tabdb, self.playdb, self.requestdb = tabdb, playdb, requestdb

            if self.tabdb is not None and self.playdb is not None:
                self.tabdb = self.add_play_counts(self.tabdb, self.playdb)


            # Display the filter frame after successful uploads
            self.filter_frame.pack(side="right", fill="both", expand=True, padx=10, pady=10)
            self.update_filters()

        except Exception as e:
            messagebox.showerror("Error", f"Failed to load data: {e}")
            self.filter_frame.pack_forget()  # Ensure filters are hidden on error

    def update_filters(self):
            """Update filter inputs with a more optimized and visually prominent layout."""
            # Clear existing widgets
            for widget in self.filter_frame.winfo_children():
                widget.destroy()

            # Center the content using a container frame
            # centered_frame = tk.Frame(self.filter_frame, bg="#2e2e2e")
            # centered_frame.pack(expand=True, fill="both", pady=20)
            centered_frame = tk.Frame(self.filter_frame, bg="#2e2e2e")
            centered_frame.pack(expand=True, fill=None, pady=20, padx=20)


            # Add a border for the entire section
            filter_section = tk.Frame(centered_frame, bg="#4a4a4a", padx=20, pady=20, relief="groove", bd=2)
            filter_section.pack(pady=20)

            # Add title for the filter section
            tk.Label(
                filter_section, text="Filters", bg="#4a4a4a", fg="white",
                font=("Arial", 18, "bold"), anchor="center"
            ).pack(pady=(5, 15))

            # Define fields with their labels
            fields = [
                ("Start Date (YYYYMMDD):", "start_date_var"),  # Moved Start Date inside Filters
                ("End Date (YYYYMMDD):", "end_date_var"),      # Moved End Date inside Filters
                ("Song:", "song"),
                ("Artist:", "artist"),
                ("Type:", "type"),
                ("Gender:", "gender"),
                ("Duration:", "duration"),
                ("Language:", "language"),
                ("Source:", "source"),
                ("Date:", "date"),
                ("Special Books:", "specialbooks"),
            ]

            # Render each field with consistent alignment and spacing
            for label_text, field_name in fields:
                field_frame = tk.Frame(filter_section, bg="#4a4a4a", pady=5)
                field_frame.pack(fill="x")

                tk.Label(
                    field_frame, text=label_text, bg="#4a4a4a", fg="white",
                    font=("Arial", 12), width=25, anchor="w"
                ).pack(side="left", padx=10)

                if field_name in ["type", "gender", "language", "source"]:  # Multi-select fields
                    listbox = tk.Listbox(
                        field_frame, selectmode=tk.MULTIPLE, height=4, font=("Arial", 10),
                        bg="#f2f2f2", fg="#3a3a3a", relief="flat", exportselection=False
                    )
                    options = self.get_dropdown_options(field_name)
                    for option in options:
                        listbox.insert(tk.END, option)
                    listbox.pack(side="right", padx=10, fill="x", expand=True)
                    self.filters[field_name] = listbox
                else:  # Input fields
                    entry = tk.Entry(
                        field_frame, textvariable=self.filters.setdefault(field_name, tk.StringVar()),
                        font=("Arial", 10), bg="#f2f2f2", fg="#3a3a3a", relief="flat"
                    )
                    entry.pack(side="right", padx=10, fill="x", expand=True)
                    self.filters[field_name] = entry

            # Difficulty Range Section
            difficulty_frame = tk.Frame(filter_section, bg="#4a4a4a", pady=10)
            difficulty_frame.pack(fill="x")

            tk.Label(
                difficulty_frame, text="Difficulty:", bg="#4a4a4a", fg="white",
                font=("Arial", 12), width=25, anchor="w"
            ).pack(side="left", padx=10)
            self.difficulty_from = tk.Entry(difficulty_frame, font=("Arial", 10), bg="#f2f2f2", fg="#3a3a3a", relief="flat")
            self.difficulty_from.pack(side="left", padx=5, fill="x", expand=True)
            tk.Label(
                difficulty_frame, text="to", bg="#4a4a4a", fg="white",
                font=("Arial", 12)
            ).pack(side="left", padx=5)
            self.difficulty_to = tk.Entry(difficulty_frame, font=("Arial", 10), bg="#f2f2f2", fg="#3a3a3a", relief="flat")
            self.difficulty_to.pack(side="left", padx=5, fill="x", expand=True)

            # Graph Menu Section
            graph_menu_frame = tk.Frame(filter_section, bg="#4a4a4a")
            graph_menu_frame.pack(fill="x", pady=20)

            tk.Label(
                graph_menu_frame, text="Choose Graph to Display:", bg="#4a4a4a", fg="white",
                font=("Arial", 12), anchor="w", width=25
            ).pack(side="left", padx=10)

            self.graph_var.set("Select Graph")  # Default placeholder
            graph_options = [
                "Select Graph",
                "Histogram of Songs by Difficulty",
                "Histogram of Songs by Duration",
                "Songs by Language",
                "Songs by Source",
                "Songs by Decade",
                "Cumulative Line Chart of Songs Played",
                "Pie Chart of Songs by Gender",
            ]
            self.graph_menu = tk.OptionMenu(graph_menu_frame, self.graph_var, *graph_options)
            self.graph_menu.configure(
                font=("Arial", 10), bg="#f2f2f2", fg="#3a3a3a", relief="flat",
                activebackground="#505050", activeforeground="white"
            )
            self.graph_menu.pack(side="left", padx=10, fill="x", expand=True)

            # Buttons Section
            button_frame = tk.Frame(filter_section, bg="#4a4a4a")
            button_frame.pack(fill="x", pady=10)

            tk.Button(
                button_frame, text="Query and Display Data", command=self.display_data,
                bg="#1e90ff", fg="white", font=("Arial", 12, "bold"), relief="flat",
                activebackground="#0066cc", activeforeground="white"
            ).pack(side="left", padx=10, pady=5, expand=True, fill="x")

            tk.Button(
                button_frame, text="Show Selected Graph", command=self.show_selected_graph,
                bg="#1e90ff", fg="white", font=("Arial", 12, "bold"), relief="flat",
                activebackground="#0066cc", activeforeground="white"
            ).pack(side="left", padx=10, pady=5, expand=True, fill="x")

            # Export All Plots to PDF Button Section
            export_button_frame = tk.Frame(filter_section, bg="#4a4a4a")
            export_button_frame.pack(fill="x", pady=(10, 20))

            tk.Button(
                export_button_frame, text="Export All Plots to PDF", command=self.export_plots_to_pdf,
                bg="#1e90ff", fg="white", font=("Arial", 12, "bold"), relief="flat",
                activebackground="#0066cc", activeforeground="white",
                padx=10, pady=5
            ).pack(side="top", padx=10, pady=5, expand=True)

    def get_dropdown_options(self, field_name):
        """Helper function to fetch dropdown options."""
        if self.tabdb is not None and field_name in self.tabdb.columns:
            return sorted(self.tabdb[field_name].dropna().unique())
        return []

        
    def add_label_and_widget(self, parent, row, label_text, widget_type, values=None):
        """Helper function to add a label and a widget to the parent frame."""
        tk.Label(parent, text=label_text, bg="#2e2e2e", fg="white", font=("Arial", 10)).grid(row=row, column=0, sticky="w", padx=10, pady=5)

        if widget_type == "listbox":
            listbox = tk.Listbox(parent, selectmode="multiple", height=5)
            for value in values:
                listbox.insert("end", value)
            listbox.grid(row=row, column=1, padx=10, pady=5)
            return listbox
        elif widget_type == "difficulty":
            from_entry = tk.Entry(parent, width=10)
            to_entry = tk.Entry(parent, width=10)
            from_entry.grid(row=row, column=1, sticky="w", padx=(10, 5))
            to_entry.grid(row=row, column=1, sticky="e", padx=(5, 10))
            return from_entry, to_entry
        elif widget_type == "entry":
            entry = tk.Entry(parent)
            entry.grid(row=row, column=1, padx=10, pady=5)
            return entry

    def add_play_counts(self, tabdb, playdb):
        playdb['play_count'] = playdb.iloc[:, 1:].apply(pd.to_numeric, errors='coerce').notnull().sum(axis=1)
        tabdb = pd.merge(tabdb, playdb[['song', 'play_count']], on='song', how='left')
        tabdb['play_count'] = tabdb['play_count'].fillna(0).astype(int)
        return tabdb

    def get_play_count_and_requests_by_date_range(self, playdb, requestdb, song_name, start_date, end_date):
        """
        Calculate the play count and fetch requests for a specific song within a specified date range.
        """
        # Convert the start and end date strings to datetime objects
        start_date = pd.to_datetime(start_date, format='%Y%m%d', errors='coerce')
        end_date = pd.to_datetime(end_date, format='%Y%m%d', errors='coerce')

        # Ensure valid date range
        if pd.isnull(start_date) or pd.isnull(end_date):
            messagebox.showerror("Invalid Date Format", "Please use YYYYMMDD format.")
            return pd.DataFrame()

        # Filter by song name and make a copy to avoid SettingWithCopyWarning
        playdb_filtered = playdb[playdb['song'].str.lower().str.strip() == song_name.lower().strip()].copy()
        requestdb_filtered = requestdb[requestdb['song'].str.lower().str.strip() == song_name.lower().strip()].copy()

        if playdb_filtered.empty and requestdb_filtered.empty:
            return pd.DataFrame()

        # Extract columns that fall within the specified date range
        date_columns = [
            col for col in playdb_filtered.columns[1:]
            if pd.to_datetime(col, format='%Y%m%d', errors='coerce') >= start_date and pd.to_datetime(col, format='%Y%m%d', errors='coerce') <= end_date
        ]

        if not date_columns:
            return pd.DataFrame()

        # Calculate the play count for the filtered date range
        playdb_filtered['play_count'] = playdb_filtered[date_columns].notna().sum(axis=1)

        # Extract request data for the filtered date range
        requestdb_filtered = requestdb_filtered[['song'] + date_columns].copy()
        requestdb_filtered = requestdb_filtered.melt(id_vars=['song'], var_name='date', value_name='requester')
        requestdb_filtered = requestdb_filtered.dropna(subset=['requester'])
        requestdb_filtered = requestdb_filtered.groupby('song')['requester'].apply(lambda x: ', '.join(x)).reset_index()

        # Merge play count and request data
        result = playdb_filtered[['song', 'play_count']].copy()
        if not requestdb_filtered.empty:
            result = pd.merge(result, requestdb_filtered, on='song', how='left')

        return result

   
    def query_data(self):
        """Query the tabdb data based on filters provided in the UI."""
        # Step 1: Copy the original tabdb for filtering
        filtered_data = self.tabdb.copy()

        # Step 2: Apply filters for each column (e.g., artist, year, type, language, etc.)
        for col, widget in self.filters.items():
            if isinstance(widget, tk.Listbox):  # Multi-select fields
                selected_values = [widget.get(i) for i in widget.curselection()]
                if selected_values:
                    filtered_data[col] = filtered_data[col].astype(str).str.strip()
                    filtered_data = filtered_data[filtered_data[col].isin(selected_values)]
            else:  # Single-value filters
                filter_value = widget.get().strip()
                if filter_value:
                    if col in ["song", "artist", "specialbooks"]:
                        filtered_data[col] = filtered_data[col].astype(str).str.strip().str.lower()
                        filter_value = filter_value.lower()
                        filtered_data = filtered_data[filtered_data[col] == filter_value]
                    # elif col == "date":
                    #     try:
                    #         filter_value = pd.to_datetime(filter_value, format='%Y%m%d', errors='coerce')
                    #         filtered_data['date'] = pd.to_datetime(filtered_data['date'], errors='coerce')
                    #         filtered_data = filtered_data[filtered_data['date'] == filter_value]
                    #     except ValueError:
                    #         messagebox.showerror("Error", f"Invalid date format for {col}. Please use YYYYMMDD format.")
                    #         return None

        # Step 3: Handle difficulty range filtering
        difficulty_from = self.difficulty_from.get().strip()
        difficulty_to = self.difficulty_to.get().strip()
        if difficulty_from or difficulty_to:
            try:
                if difficulty_from:
                    difficulty_from = float(difficulty_from)
                    filtered_data = filtered_data[filtered_data['difficulty'] >= difficulty_from]
                if difficulty_to:
                    difficulty_to = float(difficulty_to)
                    filtered_data = filtered_data[filtered_data['difficulty'] <= difficulty_to]
            except ValueError:
                # messagebox.showerror("Error", "Invalid difficulty range values. Please enter valid numbers.")
                return None
        
         # Step 4: Apply song filter if provided
        song_name = self.filters['song'].get().strip() if 'song' in self.filters else ""
        if song_name:
            filtered_data = filtered_data[filtered_data['song'].str.lower().str.strip() == song_name.lower().strip()]

        # Step 5: Apply date range filter to get play counts and requests
        start_date = self.filters['start_date_var'].get().strip()  # Updated to use the Filters dictionary
        end_date = self.filters['end_date_var'].get().strip()


        if start_date and end_date:
            # Fetch play counts and requests only for the filtered songs
            songs_to_filter = filtered_data['song'].unique() if not filtered_data.empty else []
            play_counts_requests_list = []

            for song in songs_to_filter:
                play_counts_requests = self.get_play_count_and_requests_by_date_range(self.playdb, self.requestdb, song, start_date, end_date)
                if not play_counts_requests.empty:
                    play_counts_requests_list.append(play_counts_requests)

            # Combine play counts and requests if any were found
            if play_counts_requests_list:
                all_play_counts_requests = pd.concat(play_counts_requests_list, ignore_index=True)
                all_play_counts_requests['song'] = all_play_counts_requests['song'].astype(str).str.strip().str.lower()
                filtered_data['song'] = filtered_data['song'].astype(str).str.strip().str.lower()

                # Merge play counts and requests with filtered_data
                filtered_data = pd.merge(filtered_data, all_play_counts_requests, on='song', how='left', suffixes=('', '_new'))

                # Handle conflicts after merging
                if 'play_count_new' in filtered_data.columns:
                    filtered_data['play_count'] = filtered_data['play_count_new'].fillna(0).astype(int)
                    filtered_data.drop(columns=['play_count_new'], inplace=True)
                elif 'play_count' in filtered_data.columns:
                    filtered_data['play_count'] = filtered_data['play_count'].fillna(0).astype(int)
                else:
                    filtered_data['play_count'] = 0

                if 'requester_new' in filtered_data.columns:
                    filtered_data['requester'] = filtered_data['requester_new']
                    filtered_data.drop(columns=['requester_new'], inplace=True)
            else:
                filtered_data['play_count'] = 0
                filtered_data['requester'] = ""

        return filtered_data
    
    def display_data(self):
        """ Display the filtered data in a new window """
        start_date = self.filters.get("start_date_var", tk.StringVar()).get()
        end_date = self.filters.get("end_date_var", tk.StringVar()).get()

        # Validate Start Date
        if start_date and not validate_date_format(start_date):
            messagebox.showerror("Invalid Date", "Start Date must be in YYYYMMDD format.")
            return

        # Validate End Date
        if end_date and not validate_date_format(end_date):
            messagebox.showerror("Invalid Date", "End Date must be in YYYYMMDD format.")
            return

        # Proceed with querying data if dates are valid
        try:
            filtered_data = self.query_data()  # Assume query_data is already implemented
            if filtered_data is None or filtered_data.empty:
                # Show a "No Data" message if filtered data is empty
                messagebox.showinfo("No Data", "No data available for the given filters.")
            else:
                # Proceed to display data (you can add your display logic here)
                pass
        except Exception as e:
            # Show an error message if querying fails
            messagebox.showerror("Error", f"Failed to query data: {e}")
        result = self.query_data()
        if result is not None and not result.empty:
            table_window = Toplevel(self.master)
            tree = Treeview(table_window)
            tree['columns'] = list(result.columns)
            tree.heading("#0", text="", anchor="w")
            tree.column("#0", anchor="w", width=1)
            for col in result.columns:
                tree.heading(col, text=col, anchor="w")
                tree.column(col, anchor="w", width=100)
            for _, row in result.iterrows():
                tree.insert("", "end", values=list(row))
            tree.pack(fill="both", expand=True)
        # else:
        #     messagebox.showinfo("No Data", "No matching data found.")

    def show_selected_graph(self):
        filtered_data = self.query_data()
        graph_choice = self.graph_var.get()
        if self.graph_var.get()=="Select Graph":
            messagebox.showerror("Error", "No Graph Selected")
            return
        self.plot_graph(graph_choice, filtered_data)

    def plot_graph(self, graph_choice, data, for_display=True):
            """Plot the graph based on the user's choice and optionally display it."""
            # Close any previous figures to prevent multiple windows
            plt.close('all')

            if data.empty:
                messagebox.showinfo("No Data", "No data available for the selected filters.")
                return

            plt.figure()  # Create a new figure
            if graph_choice == "Histogram of Songs by Difficulty":
                data['difficulty'].dropna().plot(kind='hist', bins=10, edgecolor='black')
                plt.title("Histogram of Songs by Difficulty")
                plt.xlabel("Difficulty")
                plt.ylabel("Frequency")
            elif graph_choice == "Histogram of Songs by Duration":
                data['duration'].dropna().apply(self.convert_duration_to_minutes).plot(kind='hist', bins=10, edgecolor='black')
                plt.title("Histogram of Songs by Duration")
                plt.xlabel("Duration (minutes)")
                plt.ylabel("Frequency")
            elif graph_choice == "Songs by Language":
                data['language'].value_counts().plot(kind='bar')
                plt.title("Songs by Language")
                plt.xlabel("Language")
                plt.ylabel("Count")

                plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels and align them
                plt.tight_layout()  # Adjust layout to prevent clipping

            elif graph_choice == "Songs by Source":
                data['source'].value_counts().plot(kind='bar')
                plt.title("Songs by Source")
                plt.xlabel("Source")
                plt.ylabel("Count")

                plt.xticks(rotation=45, ha='right')  # Rotate and align x-axis labels
                plt.tight_layout()  # Adjust layout to prevent clipping

            elif graph_choice == "Songs by Decade":
                data['year'] = pd.to_numeric(data['year'], errors='coerce')
                data = data.dropna(subset=['year'])
                data['decade'] = (data['year'] // 10) * 10
                data['decade'].value_counts().sort_index().plot(kind='bar', edgecolor='black')
                plt.title("Songs by Decade")
                plt.xlabel("Decade")
                plt.ylabel("Count")

                plt.xticks(rotation=45, ha='right')  # Rotate and align x-axis labels
                plt.tight_layout()  # Adjust layout

            elif graph_choice == "Cumulative Line Chart of Songs Played":
                data['date'] = pd.to_datetime(data['date'], errors='coerce')
                data = data.dropna(subset=['date'])
                data = data.sort_values('date')
                cumulative_counts = data['date'].value_counts().sort_index().cumsum()
                cumulative_counts.plot(kind='line', marker='o', linestyle='-', color='blue')
                plt.title("Cumulative Line Chart of Songs Played")
                plt.xlabel("Date")
                plt.ylabel("Cumulative Songs Played")

        
            elif graph_choice == "Pie Chart of Songs by Gender":
                gender_counts = data['gender'].value_counts()
                gender_counts.plot(kind='pie', autopct='', labels=None)
                plt.ylabel('')
                plt.title("Pie Chart of Songs by Gender")

                plt.legend(gender_counts.index, title="Gender", bbox_to_anchor=(0, 1), loc='upper right',prop={'size': 8}) 

            # Display the plot only if for_display is True
            if for_display:
                plt.show()

    def convert_duration_to_minutes(self, duration):
        try:
            h, m, s = map(int, duration.split(':'))
            return h * 60 + m + s / 60
        except ValueError:
            return None
    def export_plots_to_pdf(self):
        """Generate all plots and allow the user to save them to a chosen PDF file."""
        # Prompt the user to choose a file location for saving the PDF
        pdf_file_path = filedialog.asksaveasfilename(
            defaultextension=".pdf",
            filetypes=[("PDF files", "*.pdf")],
            title="Save Plots as PDF"
        )

        # Check if the user canceled the save dialog
        if not pdf_file_path:
            return

        try:
            # Temporarily use the 'Agg' backend
            with plt.rc_context({'backend': 'Agg'}):
                with PdfPages(pdf_file_path) as pdf:
                    # List of all graph types to generate
                    graph_types = [
                        "Histogram of Songs by Difficulty",
                        "Histogram of Songs by Duration",
                        "Songs by Language",
                        "Songs by Source",
                        "Songs by Decade",
                        "Cumulative Line Chart of Songs Played",
                        "Pie Chart of Songs by Gender"
                    ]

                    # Generate each plot and save it to the PDF
                    for graph_choice in graph_types:
                        # Close all figures before creating a new one
                        plt.close('all')

                        # Query data to be used for each plot
                        filtered_data = self.query_data()

                        if filtered_data is not None and not filtered_data.empty:
                            plt.figure()
                            self.plot_graph(graph_choice, filtered_data, for_display=False)

                            # Save the current figure to the PDF
                            pdf.savefig()
                            plt.close()  # Close the figure to free up memory

            # Show a success message after saving
            messagebox.showinfo("Success", f"All plots have been saved to {pdf_file_path}")

        except Exception as e:
            messagebox.showerror("Error", f"Failed to save plots: {e}")

if __name__ == "__main__":
    root = Tk()
    app = UkuleleTuesdayApp(root)
    root.mainloop()


